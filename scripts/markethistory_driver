#!/bin/bash
#
# Drive execution of market history downloader.  This script downloads all regions
# and all market types, then retrieves market history for each market type in all retrieved
# regions.
#
# $1 - config file
#
config=$1
source_id=$(jq -r -c '.source_id' ${config})
tmp_dir="$(jq -r -c '.tmp_dir' ${config})"
snap_dir="$(jq -r -c '.snapshot_dir' ${config})"
tool_home="$(jq -r -c '.tool_home' ${config})"
thread_count=$(jq -r -c '.threads' ${config})
cycle_time=$(jq -r -c '.cycle_time_marketdata' ${config})

# Create a work area for this script
here=$(pwd)
work_dir=${tmp_dir}/mhdriver_$$
mkdir -p ${work_dir}
trap "cd ${here} ; rm -rf ${work_dir}" 0
cd ${work_dir}

# Check a header file for an OK response
check_header() {
  test "$(head -1 ${1} | sed -e 's/^[[:space:]]*//g' -e 's/[[:space:]]*$//g')" == "HTTP/1.1 200 OK"
}

# Retrieve region list
get_regions() {
    if ! curl -s --compressed -X GET --header "Accept: application/json" -D region_header.txt \
	 "https://esi.tech.ccp.is/latest/universe/regions/?datasource=tranquility" > regions.json ; then
      return 1
    fi
    if ! check_header region_header.txt ; then
      return 1
    fi
    echo $(cat regions.json | jq -c '.[]|.')
}

# Retrieve the expected types for a given region
get_region_types() {
    done=0
    page=1
    region=$1
    type_list=''
    while [ ${done} -eq 0 ]; do
        if ! next_types=$(curl -s --compressed -X GET --header "Accept: application/json" -D region_type_header.txt \
			       'https://esi.tech.ccp.is/latest/markets/'${region}'/types/?datasource=tranquility&page='${page} | jq '.[]|.') ; then
	    return 1
	fi
	if ! check_header region_type_header.txt ; then
	    return 1
	fi
	type_list="${next_types} ${type_list}"
	if [ -z "${next_types}" ] ; then
	    done=1
	else
	    page=$(( ${page} + 1 ))
        fi
    done
    echo ${type_list}
}

# Get now in milliseconds
get_now() {
    echo $(( $(date +"%s") * 1000 ))
}

# Return TID from tracked record
get_tid() {
    echo $(echo $1 | egrep -o 'tid=[0-9]+' | awk -F= '{print $2}')
}

# Return tracker start from tracked record
get_tracker_start() {
    echo $(echo $1 | egrep -o 'trackerStart=[0-9]+' | awk -F= '{print $2}')
}

# Create or return the start time of the next scheduled event for the market downloader
# If an argument exists, then it specifies a start delay in seconds
get_or_create_tracker() {
    # Check for existing unfinished tracker first
    start_time=$(get_now)
    if [ $# -gt 0 ] ; then
	    start_time=$(( ${start_time} + ($1 * 1000) ))
    fi

    # Find current unfinished tracker
    if ! tracked=$(${tool_home}/ekdptool tracker -s ${source_id} -d markethistory unfinished) ; then
        echo "$? Fatal error finding unfinished tracker for market history: ${tracked}"
	exit 1
    fi

    # If no existing unfinished tracker, then create one, start it, and retrieve information
    if [ -z "${tracked}" ] ; then
	    # No tracker, create one
	    if ! tracked=$(${tool_home}/ekdptool tracker -s ${source_id} create markethistory) ; then
	        echo "Fatal error creating tracker for market history"
	        exit 1
	    fi
	    if ! (${tool_home}/ekdptool tracker -s ${source_id} -t ${tracked} start ${start_time}) ; then
	        echo "Fatal error starting tracker for market history"
	        exit 1
	    fi
	    tracked=$(${tool_home}/ekdptool tracker -s ${source_id} -d markethistory unfinished)
    fi

    # Return tracker
    echo "${tracked}"
}

# Generate logging timestamp
stamp() {
    echo "$(date -u +'%Y%m%dT%H:%M:%S %Z')"
}

# Run forever
while true ; do
    # Verify we have a scheduled tracking event for the market history downloader
    echo "$(stamp) Start retrieving trackers"
    next_tracker=$(get_or_create_tracker)
    tracker_start=$(get_tracker_start "${next_tracker}")
    tracker_tid=$(get_tid "${next_tracker}")
    echo "$(stamp) Finish retrieving trackers"

    # If we're past the start time of the next tracker, go ahead and start it.
    # Otherwise, we'll sleep until the correct start time.
    now=$(get_now)
    if [ ${tracker_start} -le ${now} ] ; then
	# Build an array mapping type to the regions which should have market data for that type
	echo "$(stamp) Build region type map"
	unset type_region_map
	declare -A type_region_map
	while ! regions=$(get_regions) ; do
	    echo "$(stamp) Failed to get region list, retrying in a few seconds"
	    sleep 5
	done
	rm -f types_list.txt
	for i in ${regions} ; do
	    echo "$(stamp) Retrieving types for region: ${i}"
	    while ! next_types=$(get_region_types ${i}) ; do
		echo "$(stamp) Failed to get types for region ${i}, retrying in a few seconds"
		sleep 5
	    done
	    for t in ${next_types} ; do
		type_region_map[$t]="${i} ${type_region_map[$t]}"
	    done
	    echo "${next_types}" | tr ' ' '\n' |sed -e '/^$/d' >> types_list.txt
	    cat types_list.txt | sort -u > types_list_tmp.txt
	    mv -f types_list_tmp.txt types_list.txt
	done
	
	# Split type list according to thread count
	type_count=$(cat types_list.txt | wc -l)
	type_count=$(( ${type_count} / ${thread_count} ))
	split -l ${type_count} types_list.txt typesplit_

	# Run a separate retrieval process for each split type file
	echo "$(stamp) Starting retrieval for market history"
	tstatus="FINISHED"
	proc_list=''
	for i in typesplit_* ; do
	    while read -r next_type ; do
		${tool_home}/markethistory ${next_type} "${tmp_dir}" "${snap_dir}" "${tool_home}" ${type_region_map[${next_type}]}
	    done < ${i} &
	    proc_list="$! ${proc_list}"
	done
	wait ${proc_list}
	
	# Finalize tracker
	if ! (${tool_home}/ekdptool tracker -s ${source_id} -t ${tracker_tid} end) ; then
	    echo "Fatal error ending tracker for market history"
	    exit 1
	fi
	if ! (${tool_home}/ekdptool tracker -s ${source_id} -t ${tracker_tid} status ${tstatus} OK) ; then
	    echo "Fatal error setting status for tracker for market history"
	    exit 1
	fi

	# Create tracker for next run no more than 11 hours after we started
	current=$(get_now)
	next_time=$(( ${now} + ${cycle_time} * 60 * 1000 ))
	delay=$(( (${next_time} - ${current})/1000 ))
	if [ ${delay} -le 0 ] ; then
	    delay=0
	fi
	get_or_create_tracker ${delay} > /dev/null
	echo "$(stamp) Finished retrieval for market history, next retrieval in ${delay} seconds"
    else
	delay=$(( (${tracker_start} - ${now})/1000 ))
	echo "$(stamp) Sleeping for ${delay} seconds until next scheduled retrieval"
	if [ ${delay} -lt 0 ] ; then
	    delay=0
	fi
	sleep ${delay}
    fi
done

