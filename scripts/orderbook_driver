#!/bin/bash
#
# Drive exeucution of order book downloader.  This script downloads all regions, then retrievers
# order book data for each region.
#
# $1 - config file
#
config=$1
source_id=$(jq -r -c '.source_id' ${config})
tmp_dir="$(jq -r -c '.tmp_dir' ${config})"
snap_dir="$(jq -r -c '.snapshot_dir' ${config})"
tool_home="$(jq -r -c '.tool_home' ${config})"
cycle_time=$(jq -r -c '.cycle_time_orderbook' ${config})
port_start=$(jq -r -c '.orderbook_ekdp_port' ${config})
port_count=$(jq -r -c '.orderbook_ekdp_servers' ${config})
if [ "${port_start}" = "null" ] ; then
    port_start=10220
fi
if [ "${port_count}" = "null" ] ; then
    port_count=1
fi

# Create a work area for this script
here=$(pwd)
work_dir=${tmp_dir}/obdriver_$$
mkdir -p ${work_dir}
trap "cd ${here} ; rm -rf ${work_dir}" 0
cd ${work_dir}

# Start ekdp tool servers
ekdp_daemons=""
for i in $(seq 0 $(( ${port_count} - 1))) ; do
    next_port=$(( ${port_start} + ${i} ))
    ${tool_home}/ekdptool -s${next_port} > ${tool_home}/ekdpserver_${i}.out 2>&1 &
    ekdp_daemons="$! ${ekdp_daemons}"
done
trap "kill -n 9 ${ekdp_daemons}" 0
sleep 5

# Check a header file for an OK response
check_header() {
  test "$(head -1 ${1} | sed -e 's/^[[:space:]]*//g' -e 's/[[:space:]]*$//g')" == "HTTP/1.1 200 OK"
}

# Retrieve region list
get_regions() {
    if ! curl -s --compressed -X GET --header "Accept: application/json" -D region_header.txt \
	 "https://esi.tech.ccp.is/latest/universe/regions/?datasource=tranquility" > regions.json ; then
      return 1
    fi
    if ! check_header region_header.txt ; then
      return 1
    fi
    echo $(cat regions.json | jq -c '.[]|.')
}

# Get now in milliseconds
get_now() {
    echo $(( $(date +"%s") * 1000 ))
}

# Return TID from tracked record
get_tid() {
    echo $(echo $1 | egrep -o 'tid=[0-9]+' | awk -F= '{print $2}')
}

# Return tracker start from tracked record
get_tracker_start() {
    echo $(echo $1 | egrep -o 'trackerStart=-?[0-9]+' | awk -F= '{print $2}')
}

# Create or return the start time of the next scheduled event for the orderbook downloader
# $1 - server port
# $2 - region
# $3 - start delay (optional)
get_or_create_tracker() {
    # Extract port
    port=$1
    shift
    
    # Extract region
    region=$1
    shift

    # Check for existing unfinished tracker first
    start_time=$(get_now)
    if [ $# -gt 0 ] ; then
	    start_time=$(( ${start_time} + ($1 * 1000) ))
    fi

    # Find current unfinished tracker
    if ! tracked=$(echo "tracker -s ${source_id} -d orderbook_${region} unfinished" | nc localhost ${port}) ; then
        echo "$(stamp) Fatal error finding unfinished tracker for orderbook ${region}: ${tracked}"
	exit 1
    fi

    # If no existing unfinished tracker, then create one, start it, and retrieve information
    if [ -z "${tracked}" ] ; then
	    # No tracker, create one
	    if ! tracked=$(echo "tracker -s ${source_id} create orderbook_${region}" | nc localhost ${port}) ; then
	        echo "$(stamp) Fatal error creating tracker for order book ${region}"
	        exit 1
	    fi
	    if ! $(echo "tracker -s ${source_id} -t ${tracked} start ${start_time}" | nc localhost ${port}) ; then
	        echo "$(stamp) Fatal error starting tracker for order book ${region}"
	        exit 1
	    fi
	    tracked=$(echo "tracker -s ${source_id} -d orderbook_${region} unfinished" | nc localhost ${port})
    fi

    # Return tracker
    echo "${tracked}"
}

# Generate logging timestamp
stamp() {
    echo "$(date -u +'%Y%m%dT%H:%M:%S %Z')"
}

# Launch an orderbook retriever for a given region
# This function is normally launched as a separate process
# which will wait for the subprocess to exit, automatically
# restarting in the case of a failure.
#
# $1 - assigned server port
# $2 - region
run_orderbook_retriever() {
    port=$1
    next_region=$2
    while true ; do
	echo "$(stamp) Starting order book thread for region ${next_region}"
	(
	    while true ; do
		# Get a tracker 
		echo "$(stamp) Start retrieving trackers ${next_region}"
		next_tracker=$(get_or_create_tracker $port $next_region)
		tracker_start=$(get_tracker_start "${next_tracker}")
		tracker_tid=$(get_tid "${next_tracker}")
		echo "$(stamp) Finish retrieving trackers"

		# Verify we're ready to start tracking, otherwise sleep until this
		# tracker says to start.
		now=$(get_now)
		if [ ${tracker_start} -le ${now} ] ; then
		    # Assume we'll complete ok
		    tstatus="FINISHED"
		    
		    # Retrieve order book
		    if ! ${tool_home}/orderbook ${next_region} "${tmp_dir}" "${snap_dir}" "${tool_home}" ; then
			echo "$(stamp) Retrieval failed for order book ${next_region}"
			tstatus="ERROR"
		    fi
		    
		    # Finalize tracker
		    if ! (echo "tracker -s ${source_id} -t ${tracker_tid} end" | nc localhost ${port}) ; then
			echo "$(stamp) Fatal error ending tracker for order book ${next_region}"
			exit 1
		    fi

		    # Set tracker status
		    if ! (echo "tracker -s ${source_id} -t ${tracker_tid} status ${tstatus} OK" | nc localhost ${port}) ; then
			echo "$(stamp) Fatal error setting status for tracker for order book ${next_region}"
			exit 1
		    fi

		    # Create tracker based on cycle time in minutes
		    current=$(get_now)
		    next_time=$(( ${now} + ${cycle_time} * 60 * 1000 ))
		    delay=$(( (${next_time} - ${current})/1000 ))
		    if [ ${delay} -le 0 ] ; then
			delay=0
		    fi
		    get_or_create_tracker ${port} ${next_region} ${delay} > /dev/null
		    echo "$(stamp) Finished retrieval for order book ${next_region}, next retrieval in ${delay} seconds"
		else
		    delay=$(( (${tracker_start} - ${now})/1000 ))
		    echo "$(stamp) Sleeping for ${delay} seconds until next scheduled retrieval for order book ${next_region}"
		    if [ ${delay} -lt 0 ] ; then
			delay=0
		    fi
		    sleep ${delay}
		fi
	    done
	) &
	wait $!
	echo "$(stamp) Order book thread for region ${next_region} ended"
	echo "$(stamp) Pausing 60 seconds before restart"
	sleep 60
    done
}

# Run forever
while true ; do
    # Retrieve regions
    echo "$(stamp) Retrieving regions"
    if ! regions=$(get_regions) ; then
        echo "$(stamp) Error retrieving regions, reytring in a few seconds"
        sleep 5
        continue
    fi
    echo "$(stamp) region list: ${regions}"
    
    # Start one order book retriever thread for each region.  Each thread
    # is also responsible for controlling its own tracker.
    proc_list=''
    i=0
    for next_region in ${regions} ; do
	port=$(( ${port_start} + ${i} ))
	run_orderbook_retriever ${port} ${next_region} &
	proc_list="$! ${proc_list}"
	i=$(( (${i} + 1) % ${port_count} ))
	# Space out update threads to reduce contention
	sleep 5
    done
    wait ${proc_list}
    
done

